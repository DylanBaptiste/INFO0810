https://neptune.ai/blog/graph-neural-network-and-some-of-gnn-applications

LSTM, RNN, GNN






(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 2) * (RE_P1S, FE_P1VP2, 9) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 4)
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 1) * (RE_P1S, FE_P1VP2, 10) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 6)
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 3) * (RE_P1S, FE_P1VP2, 8) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 5)
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 2) * (RE_P1S, FE_P1VP2, 10) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 5)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 2) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 6)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 1) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 8)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 3) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 6)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 2) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 8)




=============================================================================================



(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, [1, 3]) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, [6, 8])
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, [1, 3]) * (RE_P1S, FE_P1VP2, [8, 10]) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, [4, 6])


(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, [1, 3]) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, [6, 8])
  0     1     0 0        1        2     1  3        2        3     11 11      3         4     1 1        4         5     6  8

(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, [1, 3]) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, [6, 8])
  0     11    0 0       11       12     1  3        12       03    11 11      03        13    1 1       13       04     6  8





(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 3) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 6)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 2) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 8)
00,11,-1,11,12,3,12,03,11,03,13,1,13,04,6 => N
00,11,-1,11,12,2,12,03,11,03,13,1,13,04,8 => N


=> CNN ?
00,11,-1,11,12,3,12,03,11,03,13,1,13,04,6 

00, 11, -1
11, 12,  3
12, 03, 11
03, 13,  1
13, 04,  6

-> innutile : car petite taille d'entrée => Rappel : le CNN à pour but de contracter l'information dans un espace plus petit pour permettre à une couche FC (Fully Connected, i.e un ANN) de classifier
-> information localement NON similaire => Rappel : idem
-> sens de faire une convolution (un filtre) ici ? Rappel : voir page 31/32
-> un max/average pooling conduirait à une perte d'information utile !
-> Type d'information different representé par des valeurs similaires => identifiant de RE_A1B4 : 11 et contrainte temporelle de valeur 11
   (c'est le probleme de traviller avec des string, dans ce cas ici transformer les chaines en nombre ne resout pas le probleme)

Architecture d'un CNN page 55/56

5,
00, 11, -1
11, 12,  3
12, 03, 11
03, 13,  1
13, 04,  6

  ,   ,  5
00, 11, -1
11, 12,  3
12, 03, 11
03, 13,  1
13, 04,  6


(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 2) * (RE_P1S, FE_P1VP2,  9) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 4)
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 1) * (RE_P1S, FE_P1VP2, 10) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 6)
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 3) * (RE_P1S, FE_P1VP2,  8) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 5)
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 2) * (RE_P1S, FE_P1VP2, 10) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 5)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 2) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 6)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 1) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 8)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 3) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 6)
(In, RE_A1B4, nct) * (RE_A1B4, RE_P1S, 2) * (RE_P1S, FE_P1VP4, 11) * (FE_P1VP4, RE_P1VP4, 1) * (RE_P1VP4, FE_P4E, 8)

Encodage V1 => 
[
	[Normal,  1,  2, -1,  2,  3, 2,  3,  4,  9,  4,  5, 1,  5,  6, 4],
	[Normal,  8,  7, -1,  7,  9, 1,  9, 10, 10, 10, 11, 1, 11, 12, 6],
	[Normal, 14, 13, -1, 13, 15, 3, 15, 16,  8, 16, 17, 1, 17, 18, 5],
	[Normal, 20, 19, -1, 19, 21, 2, 21, 22, 10, 22, 23, 1, 23, 24, 5],
	[Normal, 26, 25, -1, 25, 27, 2, 27, 28, 11, 28, 29, 1, 29, 30, 6],
	[Normal, 32, 31, -1, 31, 33, 1, 33, 34, 11, 34, 35, 1, 35, 36, 8],
	[Normal, 38, 37, -1, 37, 39, 3, 39, 40, 11, 40, 41, 1, 41, 42, 6],
	[Normal, 44, 43, -1, 43, 45, 2, 45, 46, 11, 46, 47, 1, 47, 48, 8]
]

Encodage V2 => 
[
	[Normal, -1, -1, 1, 0, -1, 1, 1, 0, 1, 2, 2, 1, 1, 2, 0, 3,  9, 1, 0, 3, 1, 3, 1, 1, 1, 3, 0, 5, 4],
	[Normal, -1, -1, 1, 0, -1, 1, 1, 0, 1, 2, 1, 1, 1, 2, 0, 3, 10, 1, 0, 3, 1, 3, 1, 1, 1, 3, 0, 5, 6],
	[Normal, -1, -1, 1, 0, -1, 1, 1, 0, 1, 2, 3, 1, 1, 2, 0, 3,  8, 1, 0, 3, 1, 3, 1, 1, 1, 3, 0, 5, 5],
	[Normal, -1, -1, 1, 0, -1, 1, 1, 0, 1, 2, 2, 1, 1, 2, 0, 3, 10, 1, 0, 3, 1, 3, 1, 1, 1, 3, 0, 5, 5],
	[Normal, -1, -1, 1, 1, -1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 4, 11, 1, 0, 4, 1, 4, 1, 1, 1, 4, 0, 6, 6],
	[Normal, -1, -1, 1, 1, -1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 0, 4, 11, 1, 0, 4, 1, 4, 1, 1, 1, 4, 0, 6, 8],
	[Normal, -1, -1, 1, 1, -1, 1, 1, 1, 1, 2, 3, 1, 1, 2, 0, 4, 11, 1, 0, 4, 1, 4, 1, 1, 1, 4, 0, 6, 6],
	[Normal, -1, -1, 1, 1, -1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 4, 11, 1, 0, 4, 1, 4, 1, 1, 1, 4, 0, 6, 8]
]



(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 2) * (RE_P1S, FE_P1VP2, 9) * (FE_P1VP2, RE_P1VP2, 1) * (RE_P1VP2, FE_P2E, 4)
=> 
(In, RE_A1B2, nct) * (RE_A1B2, RE_P1S, 2) * (RE_P1S, RE_P1VP2, 10) * (RE_P1VP2, FE_P2E, 4) => (RE_P1S, FE_P1VP2,  9) collage à 0 de P1VP2
